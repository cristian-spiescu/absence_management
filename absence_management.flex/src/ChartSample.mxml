<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600"
			   xmlns:MyComp="*" xmlns:chart="com.crispico.chart.*">
	<s:layout>
		<s:VerticalLayout paddingBottom="2" paddingTop="2" paddingRight="2" paddingLeft="2"/>
	</s:layout>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.crispico.chart.IntervalData;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.utils.ObjectUtil;
			
			[Bindable]
			public var list:ArrayCollection;
			public var item:IntervalData;
			public var defaultLength:Number = 21;
			
			
			public function populateClickHandler(event:MouseEvent):void {
				
				list = new ArrayCollection();
				myChart.lengthOfChart = defaultLength;
				intervalText.text = "";
				for(var i = 1; i < 5; i++){
					var item:IntervalData = new IntervalData();
					//item.value = uint(Math.random() * 100);
					item.value = (2 * this.width) / myChart.lengthOfChart;

					if(i % 2 == 0) 
						item.color = 0xf2d7fb;
					else item.color = 0x40e0d0;
					
					list.addItem(item);
				}
				
				lengthOfInterval.text = String(defaultLength);
				
				
			}
			
			public function addClickHandler(event:MouseEvent):void {
				if(list == null){
					Alert.show("Populate the interval first!");
					return;
				}
				item = new IntervalData();
				item.value = (this.width * 2) / myChart.lengthOfChart;
				
				if(2 > myChart.getFreeIntervalSpace()){
					Alert.show("Dimensiune prea mare!");
					return;
				}
				
				if(list.length == 0){
					item.color = 0x40e0d0;
				}
				else if(list.getItemAt(list.length - 1).color == 0xf2d7fb ){
					item.color = 0x40e0d0;
				}
				else item.color = 0xf2d7fb;
				
				list.addItem(item);
			}
			
			public function deleteClickHandler(event:MouseEvent):void {
				if(myChart.selected == null){
					Alert.show("Select an interval first!");
				}
				else{
					for each(var elem:IntervalData in list){
						if(ObjectUtil.compare(myChart.selected.data,elem) == 0 ){
							list.removeItemAt(list.getItemIndex(elem));
							myChart.selected = null;
							break;
						}
					}
				}
			}
			
			public function changeLengthEventHandler(event:Event):void {
				if(Number(intervalText.text)- int(Number(intervalText.text)) != 0){
					Alert.show("Please insert a integer!");
					return;
				}
				var aux:Number = myChart.getFreeIntervalSpace() - Number(intervalText.text) 
					+ myChart.selected.data.value / this.width * myChart.lengthOfChart;
				if(aux < 0){
					Alert.show("Valoare prea mare!");
					return;
				}
				myChart.selected.data.value = Number(intervalText.text) * this.width / myChart.lengthOfChart;
				
			}
			
			
			public function redimensionTextHandler(event:Event):void {	
				if(lengthOfInterval.text != ""){
					if(Number(lengthOfInterval.text)- int(Number(lengthOfInterval.text)) != 0){
						Alert.show("Please insert a integer!");
					}else {
						var sumOfIntervals:Number = myChart.lengthOfChart - myChart.getFreeIntervalSpace();
						if(sumOfIntervals > Number(lengthOfInterval.text)){
							Alert.show("Nu se poate redimensiona! Intervale prea mari!");
							return;
						}
						myChart.redimensionChart(Number(lengthOfInterval.text));
					}
					
				}
				else{
					myChart.redimensionChart(defaultLength);
				}
			}
			
		]]>
	</fx:Script>
	<s:Panel title="Commands" width="100%" height="60">
		<s:layout>
			<s:HorizontalLayout paddingBottom="2" paddingTop="2" paddingRight="2" paddingLeft="2" verticalAlign="middle"/>
		</s:layout>
		<s:Button label="Populate with data" toolTip="Changes the data provider with a new one with 7 Intervals"
				  click = "populateClickHandler(event)"/>
		<s:Label text="Value of selected interval" toolTip="On change => the value in the model is updated"/>
		<s:TextInput id = "intervalText" change="changeLengthEventHandler(event)" />
		<s:Button label="Add" toolTip="Adds a new interval with value = 2"
				  click="addClickHandler(event)"/>
		<s:Button label="Delete" toolTip="Deletes the selected interval"
				  click = "deleteClickHandler(event)"/>
		<s:Label text="Interval" toolTip="On change => the chart is updated"/>
		<s:TextInput id="lengthOfInterval" />
		<s:Button click = "redimensionTextHandler(event)" label = "OK"/>
		
	</s:Panel>
	<s:Panel title="Chart" width="100%">
		<chart:Chart id = "myChart" dataProvider="{list}"/>
	</s:Panel>
</s:Application>
