<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 close="PopUpManager.removePopUp(this)" width="600" height="320" creationComplete="getAllAbsenceTypes(event)">
	<fx:Script>
		<![CDATA[
			import com.crispico.absence_management.model.Absence;
			import com.crispico.absence_management.model.AbsenceType;
			import com.crispico.absence_management.model.Employee;
			
			import mx.collections.ArrayCollection;
			import mx.controls.DataGrid;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			
			
			[Bindable]
			public var employee:Employee = new Employee();
			[Bindable]
			public var absencesGrid:DataGrid;
			
			protected function getAllAbsenceTypes(event:FlexEvent):void {
				absenceTypeService.getAllAbsenceTypes();
			}
			
			private function getAllAbsenceTypeResultHandler(event:ResultEvent):void {	
				typeList.dataProvider = ArrayCollection(event.result);
			}
			
			protected function addAbsence(event:MouseEvent):void{
				absenceTypeService.getAbsenceTypeById(typeList.selectedItem.id);
			}
			
			private function getAbsenceTypeByIdResultHandler(event:ResultEvent):void {
				var absenceType:AbsenceType = AbsenceType(event.result);
				var absence:Absence = new Absence();
				absence.startDate = new Date(startDate.text);
				absence.endDate = new Date(endDate.text);
				absence.employee = employee;
				absence.type = absenceType;
				absenceService.addAbsence(absence);
			}	
			
			private function addAbsenceHandler(event:ResultEvent):void {
				var absence:Absence = Absence(event.result);
				ArrayCollection(absencesGrid.dataProvider).addItem(absence);
				PopUpManager.removePopUp(this);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:ChannelSet id="channelSet">
			<s:AMFChannel url="messagebroker/remoting-amf"/>
		</s:ChannelSet>
		<mx:RemoteObject id="absenceTypeService" destination="absenceTypeService" channelSet="{channelSet}" >
			<mx:method name="getAllAbsenceTypes" result="getAllAbsenceTypeResultHandler(event)"/>
			<mx:method name="getAbsenceTypeById" result="getAbsenceTypeByIdResultHandler(event)"/>
		</mx:RemoteObject>
		<mx:RemoteObject id="absenceService" destination="absenceService" channelSet="{channelSet}" >
			<mx:method name="addAbsence" result="addAbsenceHandler(event)"/>
		</mx:RemoteObject>
	</fx:Declarations>
	<s:layout>
		<s:VerticalLayout horizontalAlign="center"/>
	</s:layout>
	<s:Form>
		<s:FormItem label="start date">
			<mx:DateField id="startDate"></mx:DateField>
		</s:FormItem>
		<s:FormItem label="end date">
			<mx:DateField id="endDate"></mx:DateField>
		</s:FormItem>


		<s:FormItem label="type">
			<s:DropDownList id="typeList" prompt="Select type" width="200"  labelField="type" />
		</s:FormItem>
		<s:FormItem >
			<s:Button label="Save" click="addAbsence(event)"
					  enabled="{typeList.selectedItem!=null &amp;&amp; startDate.text!=''
					  &amp;&amp; endDate.text!='' &amp;&amp;
					  new Date(startDate.text).getTime() &lt; new Date(endDate.text).getTime()}"></s:Button>
		</s:FormItem>
		<s:FormItem>
			<s:Label color="red" fontSize="14" visible="{new Date(startDate.text).getTime() &gt; new Date(endDate.text).getTime() }" text="Wrong interval">		
			</s:Label>
		</s:FormItem>

	</s:Form>


</s:TitleWindow>
