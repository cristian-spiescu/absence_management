<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 creationComplete="creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.crispico.absence_management.model.Employee;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

			private var list:ArrayCollection = new ArrayCollection();

			private function creationCompleteHandler(event:FlexEvent):void {
//				for (var i:int = 0; i < 10; i++) {
//					var employee:Employee = new Employee();
//					employee.firstName = "First " + i;
//					employee.lastName = "Last " + i;
//					list.addItem(employee);
//				}
				
				employeeService.getAllEmployees();
				//grid.dataProvider = list;	
			}
			
			private function addClickHandler(event:MouseEvent):void {
				var employee:Employee = new Employee();
				employee.firstName = "First name";
				employee.lastName = "Last Name";
				var form:EmployeeAddForm = new EmployeeAddForm();
				form.employee = employee;
				PopUpManager.addPopUp(form, this, true);
				PopUpManager.centerPopUp(form);
				//employeeService.addEmployee(employee);
				list.addItem(employee);			
			}
			
			private function deleteClickHandler(event:MouseEvent):void{
				var employee:Employee = Employee(grid.selectedItem);
				list.removeItemAt(list.getItemIndex(employee));
				employeeService.deleteEmployee(employee);
			}
			
			private function reverseClickHandler(event:MouseEvent):void {
//				for each (var employee:Employee in grid.selectedItems) {
//					var temp:String = employee.firstName;
//					employee.firstName = employee.lastName;
//					employee.lastName = temp;
//				}
				var employee:Employee = Employee(grid.selectedItem);
				var temp:String = employee.firstName;
				employee.firstName = employee.lastName;
				employee.lastName = temp;
			}
			
			private function editClickHandler(event:MouseEvent):void {
				var form:EmployeeForm = new EmployeeForm();
				form.employee = Employee(grid.selectedItem);
				PopUpManager.addPopUp(form, this, true);
				PopUpManager.centerPopUp(form);
			}
			
			private function sayHelloResultHandler(event:ResultEvent):void {
//				Alert.show("" + event.result);
			}
			
			private function employeeServiceFaultHandler(event:FaultEvent):void {
				Alert.show("Service invocation error: " + event.fault.faultString);				
			}
			
			private function getAllEmployeesResultHandler(event:ResultEvent):void {
				//Alert.show("" + ArrayCollection(event.result));
				list = ArrayCollection(event.result);
				grid.dataProvider = list;	
			}	
			
			private function deselectClickHandler(event:MouseEvent):void{
				grid.selectedItem = null;
				grid.selectedIndex = -1;
			}
			
			private function filterAbsencesClickHandler(event:MouseEvent):void{
				var form:AbsenceTable = new AbsenceTable();
				form.list = list;
				PopUpManager.addPopUp(form, this, true);
				PopUpManager.centerPopUp(form);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:ChannelSet id="channelSet">
			<s:AMFChannel url="messagebroker/remoting-amf"/>
		</s:ChannelSet>
		<mx:RemoteObject id="employeeService" destination="employeeService" channelSet="{channelSet}" fault="employeeServiceFaultHandler(event)">
			<mx:method name="sayHello" result="sayHelloResultHandler(event)"/>
			<mx:method name="getAllEmployees" result="getAllEmployeesResultHandler(event)"/>
		</mx:RemoteObject> 
	</fx:Declarations>
	<s:HGroup paddingTop="10" paddingBottom="4">
		<mx:Button label="Add" click="addClickHandler(event); grid.selectedIndex = -1"/>
		<s:Button label="Delete" click="deleteClickHandler(event); grid.selectedIndex = -1" enabled="{grid.selectedItem != null}"/>
		<s:Button label="Reverse First/Last Name" enabled="{grid.selectedItem != null}" click="reverseClickHandler(event)"/>
		<s:Button label="Edit" click="editClickHandler(event)" enabled="{grid.selectedItem != null}"/>
		<!--<s:Button label="Invoke test server method" click="employeeService.sayHello('Cristi'); employeeService.getAllEmployees()"/>-->
		<s:Button label="Deselect" click="deselectClickHandler(event)" enabled="{grid.selectedItem != null}"/>
		<s:Button label="Filter absences" click="filterAbsencesClickHandler(event)"/>
	</s:HGroup>
	<mx:DataGrid id="grid" width="100%" height="100%" allowMultipleSelection="true">
		<mx:columns>
			<mx:DataGridColumn dataField="id" headerText="ID"/>
			<mx:DataGridColumn dataField="firstName" headerText="First Name"/>
			<mx:DataGridColumn dataField="lastName" headerText="Last Name"/>
		</mx:columns>
	</mx:DataGrid>
</s:VGroup>
