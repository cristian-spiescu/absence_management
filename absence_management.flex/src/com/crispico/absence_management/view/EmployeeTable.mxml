<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" 
		  creationComplete="creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.crispico.absence_management.model.Employee;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;			
			
			[Bindable]
			public var list:ArrayCollection = new ArrayCollection();			
			
			private function creationCompleteHandler(event:FlexEvent):void {
				//employeeService.getAllEmployees();
			}
			
			private function loginClickHandler(event:MouseEvent):void {
				var form:LoginForm = new LoginForm();
				form.table = this;
				PopUpManager.addPopUp(form, this, true);
				PopUpManager.centerPopUp(form);
			}
			
			// Logout and handle success or failure. 
			private function ROLogout():void { 
				// Add result and fault handlers. 
				var token:AsyncToken = channelSet.logout(); 
				token.addResponder(new AsyncResponder(LogoutResultEvent,LogoutFaultEvent)); 
			} 
			
			// Handle successful logout. 
			private function LogoutResultEvent(event:ResultEvent, token:Object=null):void { 
				switch (event.result) { 
					case "success": 
						ArrayCollection(grid.dataProvider).removeAll();
						list.removeAll();
						logoutButton.enabled = false;
						loginButton.enabled = true;
						break; 
					default: 
				} 
			} 
			
			// Handle logout failure. 
			private function LogoutFaultEvent(event:FaultEvent, token:Object=null):void { 
				Alert.show("Logout failure: " + event.fault.faultString); 
			}
			
			private function addClickHandler(event:MouseEvent):void {
				var form:EmployeeAddForm = new EmployeeAddForm();
				form.table = this;
				PopUpManager.addPopUp(form, this, true);
				PopUpManager.centerPopUp(form);
			}
			
			private function deleteClickHandler(event:MouseEvent):void {
				var form:EmployeeDeleteForm = new EmployeeDeleteForm();
				form.employee = Employee(grid.selectedItem);
				form.table = this;
				PopUpManager.addPopUp(form, this, true);
				PopUpManager.centerPopUp(form);
			}
			
			private function viewClickHandler(event:MouseEvent):void {
				var form:EmployeeViewAbsForm = new EmployeeViewAbsForm();
				form.employee = Employee(grid.selectedItem);
				PopUpManager.addPopUp(form, this, true);
				PopUpManager.centerPopUp(form);
			}
			
			private function editClickHandler(event:MouseEvent):void {
				var form:EmployeeEditForm = new EmployeeEditForm();
				form.employee = Employee(grid.selectedItem);
				form.employeeTable = this;
				PopUpManager.addPopUp(form, this, true);
				PopUpManager.centerPopUp(form);
			}
			
			private function filterClickHandler(event:MouseEvent):void {
				var form:AbsenceFilter = new AbsenceFilter();
				form.height = this.height;
				form.width = this.width;
				PopUpManager.addPopUp(form, this, true);
				PopUpManager.centerPopUp(form);
			}
			
			private function getAllEmployeesResultHandler(event:ResultEvent):void {
				list = ArrayCollection(event.result);
				grid.dataProvider = list;
			}
			
			public function deleteAllEmployeesResultHandler():void {
				ArrayCollection(grid.dataProvider).removeAll();
				list.removeAll();
			}
			
		]]>
	</fx:Script>
	
		<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		.myHeaderStyles { 
			fontSize:"14";
			fontWeight:"bold";
			textAlign:center;
		}
	</fx:Style>
	
	<fx:Declarations>
		<s:ChannelSet id="channelSet">
			<s:AMFChannel url="messagebroker/remoting-amf"/>
		</s:ChannelSet>
		<mx:RemoteObject id="employeeService" destination="employeeService" channelSet="{channelSet}">
			<mx:method name="getAllEmployees" result="getAllEmployeesResultHandler(event)"/>
		</mx:RemoteObject>		
	</fx:Declarations>
	
	<s:HGroup height="70" paddingLeft="20" verticalAlign="middle" chromeColor="0x003300">
		<mx:Button label="Login"
				   id="loginButton"
				   enabled="true"
				   fontSize="18"
				   chromeColor="0x330000" color="0xe0e0e0"
				   height="28"
				   click="loginClickHandler(event);"/>
		<mx:Button label="Logout"
				   id="logoutButton"
				   enabled="false"
				   fontSize="18"
				   chromeColor="0x330000" color="0xe0e0e0"
				   height="28"
				   click="ROLogout();"/>
		
		<mx:Button label="Add new employee"
				  fontSize="18"
				  chromeColor="0x330000" color="0xe0e0e0"
				  height="28"
				  click="addClickHandler(event);"/>
		<mx:Button label="Delete employee"
				   fontSize="18"
				   chromeColor="0x330000" color="0xe0e0e0"
				   height="28"
				   enabled="{grid.selectedItem != null}"
				   click="deleteClickHandler(event);"/>
		<mx:Button label="Edit employee"
				  fontSize="18"
				  chromeColor="0x330000" color="0xe0e0e0"
				  height="28"
				  enabled="{grid.selectedItem != null}"
				  click="editClickHandler(event);"/>
		<mx:Button label="View an employee's absences"
				   fontSize="18"
				   chromeColor="0x330000" color="0xe0e0e0"
				   height="28"
				   enabled="{grid.selectedItem != null}"
				   click="viewClickHandler(event);"/>		
		<mx:Button label="Filter absences"
				   fontSize="18"
				   chromeColor="0x330000" color="0xe0e0e0"
				   height="28"
				   click="filterClickHandler(event);"/>
	</s:HGroup>
	
	<mx:DataGrid id="grid" 
				 width="100%" height="100%"
				 chromeColor="0x000033"
				 headerStyleName="myHeaderStyles"				 
				 horizontalGridLines="true" horizontalGridLineColor="0x707070">
		<mx:columns>
			<mx:DataGridColumn dataField="id" headerText="Employee's ID"/>
			<mx:DataGridColumn dataField="firstName" headerText="First Name"/>
			<mx:DataGridColumn dataField="lastName" headerText="Last Name"/>
		</mx:columns>
	</mx:DataGrid>
</s:VGroup>