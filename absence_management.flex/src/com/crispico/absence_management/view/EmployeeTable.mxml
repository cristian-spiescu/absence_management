<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  creationComplete="creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.crispico.absence_management.model.Employee;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import spark.events.TextOperationEvent;

			private var list:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var searchInput:String;
			
			private function creationCompleteHandler(event:FlexEvent):void {
				employeeService.getEmployeesByPage(1);
			}
			
			private function addEmployeeModal(event:MouseEvent):void {
				var addEmployeeForm:AddEmployeeForm = new AddEmployeeForm();
				addEmployeeForm.grid = DataGrid(employeeGrid);
				PopUpManager.addPopUp(addEmployeeForm, this, true);
				PopUpManager.centerPopUp(addEmployeeForm);	
			}
			
			private function editEmployeeModal(event:MouseEvent):void {
				var form:EditEmployeeForm = new EditEmployeeForm();
				form.employee = Employee(employeeGrid.selectedItem);
				form.grid = DataGrid(employeeGrid);
				PopUpManager.addPopUp(form, this, true);
				PopUpManager.centerPopUp(form);
			}
			
			private function employeeServiceFaultHandler(event:FaultEvent):void {
				Alert.show("Service invocation error: " + event.fault.faultString);				
			}
			
			private function getAllEmployeesResultHandler(event:ResultEvent):void {
				employeeGrid.dataProvider = ArrayCollection(event.result);	
			}		
			
			private function getEmployeesByNameResultHandler(event:ResultEvent):void {
				employeeGrid.dataProvider = ArrayCollection(event.result);	
			}	
			
			protected function deleteEmployee(event:MouseEvent):void {
				var employee:Employee = Employee(employeeGrid.selectedItem);
				employeeService.deleteEmployee(employee);
				var i:Number = ArrayCollection(employeeGrid.dataProvider).getItemIndex(employee);
				ArrayCollection(employeeGrid.dataProvider).removeItemAt(i);
			}
			
			protected function changeSearchBox(event:TextOperationEvent):void {
				employeeService.getEmployeesByName(searchInput);
			}
			
			protected function getEmployeesByPageL(event:MouseEvent):void {
				var previousPage:Number = Number(pageNumber.label)-1;
				pageNumber.label = previousPage.toString(); 
				employeeService.getEmployeesByPage(previousPage);
			}
			
			protected function getEmployeesByPageR(event:MouseEvent):void {
				var nextPage:Number = Number(pageNumber.label)+1;
				pageNumber.label = nextPage.toString(); 
				employeeService.getEmployeesByPage(nextPage);
				
			}
			
			private function getEmployeesByPageResultHandler(event:ResultEvent):void {
				var list:ArrayCollection = ArrayCollection(event.result);
				employeeGrid.dataProvider = list;	
				nextPageButton.enabled = true;
				if(list.length<10){
					nextPageButton.enabled = false;
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:ChannelSet id="channelSet">
			<s:AMFChannel url="messagebroker/remoting-amf"/>
		</s:ChannelSet>
		<mx:RemoteObject id="employeeService" channelSet="{channelSet}" destination="employeeService"
						 fault="employeeServiceFaultHandler(event)">
			<mx:method name="getAllEmployees" result="getAllEmployeesResultHandler(event)"/>
			<mx:method name="getEmployeesByName" result="getEmployeesByNameResultHandler(event)"/>
			<mx:method name="getEmployeesByPage" result="getEmployeesByPageResultHandler(event)"/>
		</mx:RemoteObject>
	</fx:Declarations>
	<s:HGroup width="100%"  paddingTop="10" paddingRight="10">
		<mx:Button label="Add" click="addEmployeeModal(event); employeeGrid.selectedIndex = -1"/>
		<s:Button label="Delete" click="deleteEmployee(event)"
				  enabled="{employeeGrid.selectedItem != null}"/>
	
		<s:Button label="Edit" click="editEmployeeModal(event)"
				  enabled="{employeeGrid.selectedItem != null}"/>
		<s:Button label="&lt;" click="getEmployeesByPageL(event)" enabled="{Number(pageNumber.label)>1}"/>
		<s:Button label="1" id="pageNumber"/>
		<s:Button label="&gt;" click="getEmployeesByPageR(event)" id="nextPageButton"/>
		<s:HGroup horizontalAlign="right" width="100%">
			<s:Label text="search" paddingTop="5" fontWeight="bold"></s:Label><s:TextInput change="changeSearchBox(event)" text="@{searchInput}"/>
		</s:HGroup>
	</s:HGroup>
	
	<mx:DataGrid id="employeeGrid" width="100%" height="100%" allowMultipleSelection="false">
		<mx:columns>
			<mx:DataGridColumn dataField="id" headerText="ID"/>
			<mx:DataGridColumn dataField="firstName" headerText="First Name"/>
			<mx:DataGridColumn dataField="lastName" headerText="Last Name"/>
		</mx:columns>
	</mx:DataGrid>
</s:VGroup>

