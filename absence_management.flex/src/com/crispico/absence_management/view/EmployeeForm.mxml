<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:forms="com.crispico.absence_management.view.*"
		 width="500"
		 height="650"
		 
		 title="{'Edit ' + employee.firstName + ' ' + employee.lastName}" close="PopUpManager.removePopUp(this)"
		 creationComplete="creationCompleteHandler(event)"
		 >
	<fx:Script>
		<![CDATA[
			import com.crispico.absence_management.model.Absence;
			import com.crispico.absence_management.model.AbsenceType;
			import com.crispico.absence_management.model.Employee;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.DateValidator;
			
			
			
			public var df1:DateFormatter = new DateFormatter();
			public var df:DateFormatter = new DateFormatter();
			
			[Bindable]
			public var employee:Employee;
			[Bindable]
			public var absence:Absence;
			[Bindable]
			public var list:ArrayCollection;
			public var types_list:ArrayCollection;
			
			public var loc:Number;
			
			private var start_valid:DateValidator = new DateValidator();
			
			// title window creation
			[Bindable]
			public var absences_list:ArrayCollection;
			
			private function creationCompleteHandler(event:FlexEvent):void {
				df1.formatString = "DD-MMM-YYYY";
				df.formatString = "DD-MM-YYYY";
				absenceService.getAbsences(employee.id);
//				Alert.show("am apelat getallabsencetypes");
				
			}
			
			private function absenceServiceFaultHandler(event:FaultEvent):void {
				Alert.show("Service invocation error: " + event.fault.faultString);				
			}
			
			private function getAbsencesResultHandler(event:ResultEvent):void {
				// Alert.show("" + ArrayCollection(event.result));
				list = ArrayCollection(event.result);
				absences_grid.dataProvider = ArrayCollection(list);	
				
			}	
			
//			
			//error handler
			private function employeeServiceFaultHandler(event:FaultEvent):void {
				Alert.show("Service invocation error: " + event.fault.faultString);				
			}
			
			
			
			//cancel button functions
			private function titleWindow_close(evt:CloseEvent):void {
				PopUpManager.removePopUp(evt.target as IFlexDisplayObject);
			}
			
			private function cancelClickHandler(evt:MouseEvent):void {
				this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				
			}
			
			//ok button 
			private function okClickHandler(evt:MouseEvent): void {
				employee.firstName = fname.text;
				employee.lastName = lname.text;
				employeeService.editEmployee(employee);
				
				
			}
			
			//response to editing
			private function editEmployeeResultHandler(event:ResultEvent):void {
				if (event.result == true) {
					Alert.show("Employee successfully edited.","Notification",Alert.OK ,this,alertListener);
					var pageURL:String = ExternalInterface.call('window.location.href.toString');
					navigateToURL(new URLRequest(pageURL), "_self");
					PopUpManager.removePopUp(this);
					
				}
				else {
					Alert.show("Error editing employee.");
					PopUpManager.removePopUp(this);
				}
			}	
			
			private function alertListener():void {
				
				PopUpManager.removePopUp(this);
				
			}
						
			private function addAbsenceToEmployeeResultHandler(event:ResultEvent):void {
				if (event.result != null) {
					Alert.show("Absence successfully added.","Notification",Alert.OK ,this,alertListener);
					list.addItem(Absence(event.result));
				}
				else {
					Alert.show("Error adding absence.");
				}
			}
			
			//delete button
			private function deleteAbsenceClickHandler(event:MouseEvent):void {
				absence = Absence(absences_grid.selectedItem);
				loc = absences_grid.selectedIndex;
				Alert.show("Do you really wish to delete absence?","Notification",Alert.OK | Alert.CANCEL,this,deleteAlertListener);
				
			}
			
			private function deleteAlertListener(eventObj:CloseEvent):void {
				if (eventObj.detail==Alert.OK) {
					absenceService.deleteAbsence(absence.absence_id);
				}
//				PopUpManager.removePopUp(this);
				
			}
			
			private function deleteAbsenceResultHandler(event:ResultEvent):void {
				// Alert.show("" + ArrayCollection(event.result));
				if (event.result == true) {
					list.removeItemAt(loc);	
					Alert.show("Absence succesfully deleted.","Success",Alert.OK ,this);
					
				}
				else {
					Alert.show("Error deleting absence.","Error");
				}
				
			}
			
			//EDIT ABSENCE editAbsenceClickHandler(event)
			private function editAbsenceClickHandler(event:MouseEvent):void {
				absence = Absence(absences_grid.selectedItem);
				var df:DateFormatter = new DateFormatter();
				df.formatString = "YYYY-MM-DD";
				editFormAbsenceForm.stdate.text = df.format(absence.start.toString());
				editFormAbsenceForm.fsdate.text = df.format(absence.finish.toString());
				for(var i:uint=0;i<editFormAbsenceForm.abs_types_list.dataProvider.length;i++) {		
//					if(SerializeUtil.ObjectToString(types_list.getItemAt(i)) == SerializeUtil.ObjectToString(absence.type)) {						
//						ed_types.selectedItem = types_list.getItemAt(i);
//						break;											
//					}	
					var a:AbsenceType = AbsenceType(editFormAbsenceForm.abs_types_list.dataProvider.getItemAt(i));
					if (a.absence_type_id == absence.type.absence_type_id) {
						editFormAbsenceForm.selectedType = a;
					}
				}
				
				loc = absences_grid.selectedIndex;
			}
			
			private function doneManagingAbsenceclickHandler(event:Event):void {
				if (editFormAbsenceForm.formType==editFormAbsenceForm.EDIT_TYPE) {
					absenceService.editAbsence(absence.absence_id,editFormAbsenceForm.aty,editFormAbsenceForm.start,editFormAbsenceForm.finish );
					
				}
				if (editFormAbsenceForm.formType==editFormAbsenceForm.ADD_TYPE) {
					absenceService.addAbsenceToEmployee(employee,editFormAbsenceForm.start,editFormAbsenceForm.finish,editFormAbsenceForm.aty );
				}
				
				
			}
			
			private function editAbsenceResultHandler(event:ResultEvent):void {
				// Alert.show("" + ArrayCollection(event.result));
				if (event.result != null) {
					Alert.show("Absence succesfully edited.","Success",Alert.OK ,this);
					absence = Absence(event.result);
					list.removeItemAt(loc);
					list.addItem(absence);
					
				}
				else {
					Alert.show("Error editing absence.","Error");
				}
				
				
			}
			
			private function dateFormatFunction(item:Object, column:DataGridColumn):String {
				return df1.format(item[column.dataField] as Date);
			}
			
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:ChannelSet id="channelSet">
			<s:AMFChannel url="messagebroker/remoting-amf"/>
		</s:ChannelSet>
		<mx:RemoteObject id="absenceService" destination="absenceService" channelSet="{channelSet}" fault="absenceServiceFaultHandler(event)">
			<mx:method name="getAbsences" result="getAbsencesResultHandler(event)"/>
			<mx:method name="addAbsenceToEmployee" result="addAbsenceToEmployeeResultHandler(event)"/>
			<mx:method name="deleteAbsence" result="deleteAbsenceResultHandler(event)"/>
			<mx:method name="editAbsence" result="editAbsenceResultHandler(event)"/>
		</mx:RemoteObject>
		<mx:RemoteObject id="employeeService" destination="employeeService" channelSet="{channelSet}" fault="employeeServiceFaultHandler(event)">
			<mx:method name="editEmployee" result="editEmployeeResultHandler(event)"/>
		</mx:RemoteObject>
		
		
	</fx:Declarations>
	
	<s:VGroup paddingBottom="20" paddingLeft="20" paddingRight="20" paddingTop="20">
		<s:VGroup height="100">
				<s:HGroup>
					<s:Label>First name: </s:Label>
					<s:TextInput text="@{employee.firstName}" id="fname" />
				</s:HGroup>
				<s:HGroup>
					<s:Label>Last name: </s:Label>
					<s:TextInput text="@{employee.lastName}" id="lname" />
				</s:HGroup>
			
			
			<s:HGroup>
				<s:Button label="OK" click="okClickHandler(event)" width="50%" />
				<s:Button label="Cancel" click="cancelClickHandler(event)" width="50%" />
			</s:HGroup>
		</s:VGroup>
						
		<s:HGroup>
			<s:Button label="Add absence" click="editFormAbsenceForm.text='Add';editFormAbsenceForm.formType='add';editFormAbsenceForm.visible = true " />	
			<s:Button label="Delete absence" enabled="{absences_grid.selectedItem != null}" click="deleteAbsenceClickHandler(event)" />
			<s:Button label="Edit absence" enabled="{absences_grid.selectedItem != null}" click="editFormAbsenceForm.text='Edit';editFormAbsenceForm.formType='edit';editFormAbsenceForm.visible = true ;editAbsenceClickHandler(event);" />
		</s:HGroup>
		
		<s:HGroup width="100%">
			<mx:DataGrid id="absences_grid" width="100%" height="100%" allowMultipleSelection="true" >
				<mx:columns>
					<mx:DataGridColumn dataField="absence_id" headerText="ID"/>
					<mx:DataGridColumn dataField="type.type" headerText="Absence type"/>
					<mx:DataGridColumn dataField="start" headerText="Start date" labelFunction="dateFormatFunction" />
					<mx:DataGridColumn dataField="finish" headerText="End date" labelFunction="dateFormatFunction" />
				</mx:columns>
			</mx:DataGrid>
		</s:HGroup>
			
		<forms:AbsenceForm id="editFormAbsenceForm" visible="false" clicked="doneManagingAbsenceclickHandler(event)">
			
		</forms:AbsenceForm>
			
	</s:VGroup>
	
	
</s:TitleWindow>
