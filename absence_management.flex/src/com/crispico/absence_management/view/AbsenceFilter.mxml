<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   close="PopUpManager.removePopUp(this)"
			   title="Delete employee"
			   creationComplete="creationCompleteHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import com.crispico.absence_management.model.AbsenceType;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DateChooser;
			import mx.controls.Label;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.DropDownList;
			import spark.components.VGroup;
			
			
			
			[Bindable]
			public var list:ArrayCollection = new ArrayCollection();
			
			private var typeDropList:DropDownList;
			
			private var startDateChoser:DateChooser;			
			private var endDateChoser:DateChooser;
			private var sGroup:VGroup;
			private var eGroup:VGroup;
			
			
			private function creationCompleteHandler(event:FlexEvent):void {
				absenceService.getAllAbsences();	
			}
			
			private function getAllAbsencesResultHandler(event:ResultEvent):void {
				list = ArrayCollection(event.result);
				grid.dataProvider = list;
			}
			
			private function employeeName(item:Object, column:DataGridColumn):String {
				return item.employee.firstName + " " + item.employee.lastName;
			}
			
			private function startDateFormatter(item:Object, column:DataGridColumn):String { 
				return employeeDateFormatter.format(item.startDate); 
			}
			
			private function endDateFormatter(item:Object, column:DataGridColumn):String { 
				return employeeDateFormatter.format(item.endDate); 
			}
			
			private function getAbsencesTypesResultHandler(event:ResultEvent):void {
				typeDropList.dataProvider = ArrayCollection(event.result);
			}
			
			private function typeHandler(event:MouseEvent):void {
				if(byType.selected == true){
					typeDropList = new DropDownList();
					typeDropList.prompt="Choose type";
					typeDropList.labelField="description";
					typeDropList.width=170;
					absenceService.getAbsencesTypes();
					typeGroup.addElement(typeDropList);
				}
				else
					typeGroup.removeElement(typeDropList);
			}
			
			private function periodHandler(event:MouseEvent):void {
				if(byPeriod.selected == true){
					startDateChoser = new DateChooser();
					endDateChoser = new DateChooser();
					sGroup = new VGroup();
					eGroup = new VGroup();
					var sLabel:Label = new Label();
					var eLabel:Label = new Label();
					
					sLabel.text = "Select start date:";
					eLabel.text = "Select end date:";
					sGroup.addElement(sLabel);
					eGroup.addElement(eLabel);
					sGroup.addElement(startDateChoser);
					eGroup.addElement(endDateChoser);
					
					periodGroup.addElement(sGroup);
					periodGroup.addElement(eGroup);
				}
				else{
					periodGroup.removeElement(sGroup);
					periodGroup.removeElement(eGroup);
				}
			}
			
			private function searchClickHandler(event:MouseEvent):void {
				var typeFlag:Boolean = false;
				var periodFlag:Boolean = false;
				
				if(byType.selected){
					if(typeDropList.selectedItem == null)
						Alert.show("You must choose an absence type!", "Error");
					else
						typeFlag = true;
				}
				
				if(byPeriod.selected){
					if(startDateChoser.selectedDate == null)
						Alert.show("You must enter a start date!", "Error");
					else
						if(endDateChoser.selectedDate == null)
							Alert.show("You must enter a end date!", "Error");
						else
							if(startDateChoser.selectedDate > endDateChoser.selectedDate)
								Alert.show("Start date must be earlier than end date!", "Error");
							else
								periodFlag = true;
				}
				
				
				if(typeFlag){
					if(periodFlag)
						absenceService.getAbsencesByTP(AbsenceType(typeDropList.selectedItem).id,
														startDateChoser.selectedDate, 
														endDateChoser.selectedDate);
					else
						absenceService.getAbsencesByType(AbsenceType(typeDropList.selectedItem).id);
				}
				else{
					if(periodFlag)
						absenceService.getAbsencesByPeriod(startDateChoser.selectedDate, 
															endDateChoser.selectedDate);
					else
						absenceService.getAllAbsences();	
				}	
			}		
			
			
		]]>
	</fx:Script>
	
		<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		.myHeaderStyles { 
			fontSize:"14";
			fontWeight:"bold";
			textAlign:center;
		}
	</fx:Style>
	
	<fx:Declarations>
		<s:ChannelSet id="channelSet">
			<s:AMFChannel url="messagebroker/remoting-amf"/>
		</s:ChannelSet>
		<mx:RemoteObject id="absenceService" destination="absenceService" channelSet="{channelSet}">
			<mx:method name="getAllAbsences" result="getAllAbsencesResultHandler(event)"/>
			<mx:method name="getAbsencesTypes" result="getAbsencesTypesResultHandler(event)"/>
			<mx:method name="getAbsencesByType" result="getAllAbsencesResultHandler(event)"/>
			<mx:method name="getAbsencesByPeriod" result="getAllAbsencesResultHandler(event)"/>
			<mx:method name="getAbsencesByTP" result="getAllAbsencesResultHandler(event)"/>
		</mx:RemoteObject>
		<s:DateTimeFormatter id="employeeDateFormatter" dateTimePattern="yyyy-MMM-dd"/>	
	</fx:Declarations>
	
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	
	<s:Form>
		
		<s:FormItem>
			<s:HGroup id="typeGroup" gap="30">			
				<s:CheckBox id="byType" label="by absence type"
							fontWeight="bold" color="white"
							click="typeHandler(event)"/>
			</s:HGroup>
		</s:FormItem>
		
		<s:FormItem>
			<s:HGroup id="periodGroup" gap="30">			
				<s:CheckBox id="byPeriod" label="by period"
							fontWeight="bold" color="white"
							click="periodHandler(event)"/>
			</s:HGroup>
		</s:FormItem>
		
		<s:FormItem>
			<s:Form>
				<mx:DataGrid id="grid" 
							 width="100%" height="300"
							 allowMultipleSelection="true"
							 chromeColor="0x000033"
							 headerStyleName="myHeaderStyles"				 
							 horizontalGridLines="true" horizontalGridLineColor="0x707070">
					<mx:columns>
						<mx:DataGridColumn dataField="id" headerText="Absence's ID" width="150"/>
						<mx:DataGridColumn dataField="startDate" headerText="Start date"
										   labelFunction="startDateFormatter"
										   width="170"/>
						<mx:DataGridColumn dataField="endDate" headerText="End Date"
										   labelFunction="endDateFormatter"
										   width="170"/>
						<mx:DataGridColumn labelFunction="employeeName" headerText="Employee"
										   width="270"/>
						<mx:DataGridColumn dataField="type.description" headerText="Type"
										   width="250"/>
					</mx:columns>
				</mx:DataGrid>
				<s:FormItem>
					<mx:Label text="{list.length} results" fontWeight="bold" fontStyle="italic"/>
				</s:FormItem>				
			</s:Form>
		</s:FormItem>
		
		<s:FormItem>
			<s:HGroup 
				paddingBottom="20" paddingLeft="90" gap="15"
				horizontalAlign="center">
				<s:Button label="Search" fontWeight="bold"
						  click="searchClickHandler(event)"/>
				<s:Button label="Cancel" fontWeight="bold"
						  click="PopUpManager.removePopUp(this)"/>
			</s:HGroup>
		</s:FormItem>
	</s:Form>
		
		
</s:TitleWindow>