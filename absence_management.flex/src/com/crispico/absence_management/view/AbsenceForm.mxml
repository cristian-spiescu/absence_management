<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="100%"
		 xmlns:layout="org.osmf.layout.*"
		 creationComplete="creationCompleteHandler(event)">
	<s:layout>
		<s:VerticalLayout paddingBottom="10" paddingTop="10" paddingRight="10" paddingLeft="10" verticalAlign="middle">
			
		</s:VerticalLayout>
		
	</s:layout>
	
	<fx:Metadata>
		[Event(name="clicked",type="flash.events.Event")]
		
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.crispico.absence_management.model.AbsenceType;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			public const ADD_TYPE:String = "add";
			public const EDIT_TYPE:String = "edit";
			
			public var okText:String;
			public var textChanged:Boolean;
			public var aty:AbsenceType;
			public var start:String;
			public var finish:String;
			
			public var formType:String;
			public var df:DateFormatter;
			private var _dateFormat:String;
			
			public var _selectedType:AbsenceType;
			
			public function creationCompleteHandler(event:FlexEvent):void {
				textChanged = false;
				df = new DateFormatter();
				df.formatString = "YYYY-MM-DD";
				if (okText == null) {
					text = "OK";
					
				}
				absence_typeService.getAllAbsenceTypes();
			}
			
			public function set text(s:String):void {
				okText = s;
				okAbsButton.label = okText;
			}
			
			public function set dateFormat(s:String):void {
				_dateFormat = s;
				df.formatString = _dateFormat;
			}
			
//			override protected function commitProperties():void {
//				if (textChanged) {
//					textChanged = false;
//					okAbsButton.label = okText;
//					invalidateDisplayList();
//				}
//			}
			
			public function okAbsenceClickHandler(event:MouseEvent):void {
				var CurrentDateTime:Date = new Date();
				
				var data_curenta:String = df.format(CurrentDateTime);
				start = df.format(stdate.text);
				finish = df.format(fsdate.text);
				if (finish.substr(6,4) < start.substr(6,4)) {
					Alert.show("End year must be greater than or equal to the one for start date.");
				}
				else {
					if (finish.substr(3,2) < start.substr(3,2)) {
						Alert.show("End month must be greater than or equal to the one for start date.");
					}
					else {
						if (finish.substr(0,2) < start.substr(0,2)) {
							Alert.show("End day must be greater than or equal to the one for start date.");
						}
						else {
							aty = AbsenceType(abs_types_list.selectedItem);
							this.visible = false;
							var ev:Event = new Event("clicked");
							dispatchEvent(ev);
							
						}
					}
				}
				
			}
			
			public function set selectedType(a:AbsenceType):void {
				_selectedType = a;
				abs_types_list.selectedItem = _selectedType;
			}
						
			private function absenceServiceFaultHandler(event:FaultEvent):void {
				Alert.show("Service invocation error: " + event.fault.faultString);				
			}
						
			private function absence_typeServiceFaultHandler(event:FaultEvent):void {
				Alert.show("Service invocation error: " + event.fault.faultString);				
			}
			
			private function getAllAbsenceTypesResultHandler(event:ResultEvent):void {
//				trace(ArrayCollection(event.result));
				if (abs_types_list.dataProvider!=null) {
					abs_types_list.dataProvider.removeAll();
				}
				abs_types_list.dataProvider = ArrayCollection(event.result);
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:ChannelSet id="channelSet">
			<s:AMFChannel url="messagebroker/remoting-amf"/>
		</s:ChannelSet>
		
		<mx:RemoteObject id="absence_typeService" destination="absence_typeService" channelSet="{channelSet}" fault="absence_typeServiceFaultHandler(event)">
			<mx:method name="getAllAbsenceTypes" result="getAllAbsenceTypesResultHandler(event)"/>
		</mx:RemoteObject>
	</fx:Declarations>
	
	
		<s:HGroup>
			<s:VGroup>
				<s:Label>Type:</s:Label>
				
				<s:DropDownList id="abs_types_list" labelField="type">
					
				</s:DropDownList>
				<!--
				<s:DropDownList id="abs_types_list" >
					<s:dataProvider>
						<s:ArrayList source="[One,Two,Three,Four,Five,Six,Seven,Eight,Nine,Ten]" />
					</s:dataProvider>
				</s:DropDownList>
				-->
			</s:VGroup>
			<s:VGroup>
				<s:Label>Start date:</s:Label>
				<mx:DateField id="stdate" 
							  editable="true" 
							  width="100" 
							  formatString="YYYY-MM-DD"
							  selectableRange="{{rangeStart : new Date()}}"
							  firstDayOfWeek="1"
							  dayNames="['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']"
							  disabledDays="[0,6]" />
				
			</s:VGroup>
			<s:VGroup>
				<s:Label>End date:</s:Label>
				<mx:DateField id="fsdate" 
							  editable="true" 
							  width="100" 
							  formatString="YYYY-MM-DD"
							  selectableRange="{{rangeStart : new Date()}}"
							  firstDayOfWeek="1"
							  dayNames="['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']"
							  disabledDays="[0,6]" />
				
			</s:VGroup>
		</s:HGroup>
	
		<s:HGroup>
	
			<s:Button id="okAbsButton"  click="okAbsenceClickHandler(event)"/>
			<s:Button label="Cancel" click="{this.visible = false;}"/>
		</s:HGroup>
	
</s:Group>
