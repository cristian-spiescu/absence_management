<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="400"
		 
		 xmlns:custom="com.crispico.chart.*"
		 xmlns:forms="com.crispico.absence_management.view.*"
		 paddingBottom="20" paddingTop="20" paddingRight="20" paddingLeft="20"
		 creationComplete="creationCompleteHandler(event)"
		 >
	
	
	<fx:Script>
		<![CDATA[
			
			import com.crispico.absence_management.model.Absence;
			import com.crispico.absence_management.model.Employee;
			import com.crispico.chart.ChartRenderer;
			import com.crispico.chart.IntervalData;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.formatters.DateFormatter;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.TextOperationEvent;
			
			private var COLOR_RED:uint = 0xca4c4d;
			private var COLOR_GREEN:uint = 0x4b9484;
			private var COLOR_ORANGE:uint = 0xffa500;
			private var COLOR_BLUE:uint = 0x398eb5;
			
			
			[Event(name="click", type="flash.events.Event")]
			
			[Bindable]
			public var selectedInterval:IntervalData;
			[Bindable]
			public var list:ArrayCollection;
			
			public var al:Alert;
			
			public var employeeCounter:Number;
			public var howManyEmps:Number;
			public var df:DateFormatter;
			
			private const MS_PER_DAY:uint = 1000 * 60 * 60 * 24;
			
			public function creationCompleteHandler(event:FlexEvent):void {
				df = new DateFormatter();
				df.formatString = "DD-MM-YYYY";
				employeeService.getAllEmployees();
			}
			
			
			// error handler
			private function employeeServiceFaultHandler(event:FaultEvent):void {
				Alert.show("Service invocation error: " + event.fault.faultString);				
			}
			
			// populating chart 
			private function getAllEmployeesResultHandler(event:ResultEvent):void {
				list = ArrayCollection(event.result);
				howManyEmps = list.length;
				employeeCounter = 0;
//				rend = new ChartRenderer();
//				rend.total = 500;
//				rend.unitati = 21;
				rend.dataProvider = getNewProvider();
////				selectedInterval = rend.selectedInterval;
//				rend.addEventListener("click", groupClickHandler);
//				chartPane.addElement(rend);
//				absForm = new AbsenceForm();
//				absForm.visible = false;
//				absForm.okAbsButton.addEventListener("click",doneAbsenceHandler);
//				chartPane.addElement(absForm);
//				trace(chartPane.getElementIndex(absForm));
				enableButtons();
			}	
			
						
			public function groupClickHandler(event:MouseEvent):void {
				if (selectedInterval== null) {
					selectedInterval = rend.selectedInterval;
				}
				
			}
			
			public function getNewProvider():ArrayCollection {
				nume.text = Employee(list.getItemAt(employeeCounter)).firstName+" " +Employee(list.getItemAt(0)).lastName;
				
				var temp:ArrayCollection = new ArrayCollection();
				for each (var a:Absence in ArrayCollection(Employee(list.getItemAt(employeeCounter)).absences)) {
					var itv:IntervalData = new IntervalData();
					var tempDate:Date = new Date(a.finish.valueOf() - a.start.valueOf());
					
					var cate_zile:Number = Math.round(( tempDate.valueOf() / MS_PER_DAY) + 1);
					itv.value = cate_zile;
					switch (a.type.type) {
						case "Concediu medical":
							itv.color = COLOR_ORANGE;
							break;
						case "Concediu cu plata":
							itv.color = COLOR_GREEN;
							break;
						case "Concediu fara plata":
							itv.color = COLOR_RED;
							break;
						default:
							itv.color = COLOR_BLUE;
					}
					itv.info = a.type.type + "\n " + itv.value + " zile";
					itv.idul = a.absence_id;
					temp.addItem(itv);
						
				}
				return temp;
			}
			
			//switch between charts
			public function getPrevious(event:MouseEvent):void {
				if (employeeCounter > 0) {
					employeeCounter = employeeCounter -1;
					rend.dataProvider = getNewProvider();	
					enableButtons();
				}
				
			}
			
			public function getNext(event:MouseEvent):void {
				if (employeeCounter < howManyEmps-1) {
					employeeCounter = employeeCounter + 1;
					rend.dataProvider = getNewProvider();
					enableButtons();
				}
				
			}
			
			// paging
			public function enableButtons():void {
				if (employeeCounter>0) {
					prev.enabled = true;
				}
				else {
					prev.enabled = false;
				}
				if (employeeCounter<howManyEmps-1) {
					next.enabled = true;
				}
				else {
					next.enabled = false;
				}
			}
			
			//absences
			private function absenceServiceFaultHandler(event:FaultEvent):void {
				Alert.show("Service invocation error: " + event.fault.faultString);				
			}
			
			//delete button
			private function deleteClickHandler(event:MouseEvent):void {
//				al = Alert.show("Do you really wish to delete absence?","Notification",Alert.OK | Alert.CANCEL,this,deleteAlertListener);
				var abs_id:Number = selectedInterval.idul;
				absenceService.deleteAbsence(abs_id);
			}
			
			private function deleteAlertListener(eventObj:CloseEvent):void {
				if (eventObj.detail==Alert.OK) {
					var abs_id:Number = selectedInterval.idul;
					absenceService.deleteAbsence(abs_id);
				}
				
			}
			
			private function deleteAbsenceResultHandler(event:ResultEvent):void {
				// Alert.show("" + ArrayCollection(event.result));
				if (event.result == true) {
					rend.removeElement(selectedInterval);
//					Alert.show("Absence succesfully deleted.","Success",Alert.OK ,this);
				}
				else {
//					Alert.show("Error deleting absence.","Error");
				}
				
			}
			
			//add absence
			public function addClickHandler(event:MouseEvent):void {
				absForm.okText = "Add";
				absForm.visible = true;
			}
			
			public function doneAbsenceHandler(event:Event):void {
//				absenceService.addAbsenceToEmployee(list.getItemAt(employeeCounter),absForm.start,absForm.finish,absForm.aty);
				trace("s-a transmis");
			}
			
			private function addAbsenceToEmployeeResultHandler(event:ResultEvent):void {
				if (event.result != null) {
					Alert.show("Absence successfully added.","Notification",Alert.OK ,this);
					employeeService.getAllEmployees();
				}
				else {
					Alert.show("Error adding absence.");
				}
				absForm.visible = false;
			}
			
			public function changeLengthHandler(event:TextOperationEvent):void {
				rend.unitati = Number(maxLength.text);
				rend.changedLength = true;
				rend.invalidateProperties();
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:ChannelSet id="channelSet">
			<s:AMFChannel url="messagebroker/remoting-amf"/>
		</s:ChannelSet>
		<mx:RemoteObject id="employeeService" destination="employeeService" channelSet="{channelSet}" fault="employeeServiceFaultHandler(event)">
			<mx:method name="getAllEmployees" result="getAllEmployeesResultHandler(event)"/>
			
		</mx:RemoteObject>
		
		<mx:RemoteObject id="absenceService" destination="absenceService" channelSet="{channelSet}" fault="absenceServiceFaultHandler(event)">
			<mx:method name="addAbsenceToEmployee" result="addAbsenceToEmployeeResultHandler(event)"/>
			<mx:method name="deleteAbsence" result="deleteAbsenceResultHandler(event)"/>
		</mx:RemoteObject>
	</fx:Declarations>
	
	<s:Panel title="Commands" width="100%" height="70">
		<s:layout>
			<s:HorizontalLayout paddingBottom="2" paddingTop="2" paddingRight="2" paddingLeft="2" verticalAlign="middle"/>
		</s:layout>
		<s:Button id="prev" label="Previous" toolTip="Changes the current employee" click="getPrevious(event)" />
		<s:Button id="next" label="Next" toolTip="Changes the current employee" click="getNext(event)" />
		<s:Button label="Add" toolTip="Adds a new interval with value = 2" click="addClickHandler(event)"/>
		<s:Button label="Delete" toolTip="Deletes the selected interval" click="deleteClickHandler(event)"/>
		<s:Label text="Interval" toolTip="On change => the chart is updated"/>
		<s:TextInput id="maxLength" change="changeLengthHandler(event)"/>
		
	</s:Panel>

	<s:Panel id="chartPane" title="Chart" width="100%">
		<s:layout>
			<s:VerticalLayout paddingBottom="10" paddingTop="10" paddingRight="10" paddingLeft="10" verticalAlign="middle">
				
			</s:VerticalLayout>
			
		</s:layout>
		<s:Label id="nume">
			
		</s:Label>
		<custom:ChartRenderer id="rend" total="500" unitati="21" click="groupClickHandler(event)" visible="true">
			
		</custom:ChartRenderer>
		
		<forms:AbsenceForm text="Add" id="absForm" visible="false" clicked="doneAbsenceHandler(event)">
			
		</forms:AbsenceForm>
			
	</s:Panel>

	<!--	
	<s:VGroup id="chartPane" width="100%">
		<s:Label text="Chart">
			
		</s:Label>
		
	</s:VGroup>
	
	-->
</s:VGroup>
