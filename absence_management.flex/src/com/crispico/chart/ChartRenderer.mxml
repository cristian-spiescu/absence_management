<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="1000" height="100%" 
		 xmlns:layout="org.osmf.layout.*"
		 creationComplete="creationCompleteHandler(event)">
	
	<s:layout>
		<s:HorizontalLayout paddingBottom="20" paddingTop="20" paddingRight="20" paddingLeft="20" gap="2">
			
		</s:HorizontalLayout>	
		
	</s:layout>
	
	<fx:Declarations>
		<s:ArrayCollection id="lista">
			<fx:Object>
				<fx:color>0x4b9484</fx:color>
				<fx:value>2</fx:value>
			</fx:Object>
			<fx:Object>
				<fx:color>0xca4c4d</fx:color>
				<fx:value>10</fx:value>
			</fx:Object>
			<fx:Object>
				<fx:color>0xffa500</fx:color>
				<fx:value>5</fx:value>
			</fx:Object>
		</s:ArrayCollection>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.crispico.chart.IntervalData;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Label;
			import mx.events.FlexEvent;
			
			
			public var datele:ArrayCollection;
			public var total:Number;
			public var pixeliPerUnitate:Number;
			public var unitati:Number;
			
			public var selectedInterval:IntervalData;
			public var intervale:ArrayCollection;
			public var changedInterval:Boolean;
			public var changedLength:Boolean;
			public var changedDataProvider:Boolean;
			
			public function creationCompleteHandler(event:FlexEvent):void {
				pixeliPerUnitate = total/unitati;
				changedInterval = false;
				changedDataProvider = false;
				changedLength = false;
//				makeIntervals();
			}
			
			public function deleteInterval(i:IntervalData):Boolean {
				var indexul:int = intervale.getItemIndex(selectedInterval);
				trace(indexul);
				if (intervale.removeItemAt(indexul)!=null) {
					this.removeElement(selectedInterval);
					return true;
				}
				return false;
			}
			
			public function set dataProvider(arr:ArrayCollection):void {
				if (intervale!=null) {
					for each (var i:IntervalData in intervale) {
						this.removeElement(i);
					}
					intervale.removeAll();
				}
					
				intervale = arr;
				changedDataProvider = true;
				invalidateProperties();
			}
			
			public function get dataProvider():ArrayCollection {
				return intervale;
			}
			
			public function makeIntervals():void {
				if (intervale!=null ) {
					this.removeAllElements();
					intervale.removeAll();
				}
				intervale = new ArrayCollection();
				pixeliPerUnitate = total/unitati;
				for (var i:Number=0; i<7;i++) {
					var idata:IntervalData = new IntervalData();
					idata.value = makeValue();
					idata.color = makeColor(); 
					idata.info = "Colour: " + idata.color.toString() + "\n Value: " + idata.value;
					this.addElement(idata);
					intervale.addItem(idata);
				}
				
			}
			
			public function onClickHandler(event:MouseEvent):void {
				parentDocument.selectedInterval = selectedInterval;
			}
			
			public function makeColor():uint {
				return 0xffffff * Math.random();
			}
			
			public function makeValue():Number {
				return Math.round(Math.random()*10);
			}
			
			override protected function commitProperties():void { 
				super.commitProperties(); 
				if (changedLength) {
					if (unitati>0) {
						pixeliPerUnitate = total/unitati;
						for each(var itv:IntervalData in intervale) {
							itv.invalidateProperties();
						}
					}
					changedLength = false;
				}
				if (changedDataProvider) {
					changedDataProvider = false;
					
					for each(var it1:IntervalData in intervale) {
						this.addElement(it1);
//						it1.invalidateProperties();
//						trace(this.getElementIndex(it1));
//						Alert.show(it1+"");
					}
				}
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
		]]>
	</fx:Script>
	
	
<!--	
	<s:Rect id="chartContainer">
		<s:fill>
			<s:SolidColor color="#CFCFCF"></s:SolidColor>
		</s:fill>
	</s:Rect>
-->
	
</s:Group>
